#!/usr/bin/env bash
set -euo pipefail

# ---- configurable defaults ----------------------------------------------------
LANG_NAME="sr"                  # language id used by queries and parser filename
PLUGIN_NAME="tree-sitter-sr"     # folder name under packpath
FILETYPES="${FILETYPES:-sr}"    # comma-separated list: e.g. "sr,sr2"
PREFIX="${PREFIX:-${XDG_DATA_HOME:-$HOME/.local/share}/nvim}"

# ---- derived paths ------------------------------------------------------------
TARGET="$PREFIX/$PLUGIN_NAME"
TARGET_PARSER="$TARGET/parser"
TARGET_QUERIES="$TARGET/queries/$LANG_NAME"
TARGET_FTDETECT="$TARGET/ftdetect"
TARGET_PLUGIN="$TARGET/plugin"

REPO_ROOT="$(cd "$(dirname "${BASH_SOURCE[0]}")/.." && pwd)"

# ---- helpers -----------------------------------------------------------------
msg() { printf "\033[1;32m==>\033[0m %s\n" "$*"; }
err() { printf "\033[1;31m!!\033[0m %s\n" "$*" >&2; }

# ---- build parser.so if missing ----------------------------------------------
build_parser() {
  local out="${REPO_ROOT}/parser.so"
  if [[ -f "$out" ]]; then
    msg "Using existing parser.so"
    return
  fi
  msg "parser.so not found; attempting local build"
  # Minimal generic build for single-file parser.c (no scanner.c).
  # Adjust includes/objects here if your grammar adds scanners.
  cc -O2 -fPIC -I"${REPO_ROOT}/src" -I"${REPO_ROOT}/src/tree_sitter" \
     -c "${REPO_ROOT}/src/parser.c" -o "${REPO_ROOT}/parser.o"
  cc -O2 -fPIC -shared "${REPO_ROOT}/parser.o" -o "$out"
  rm -f "${REPO_ROOT}/parser.o"
  msg "Built $out"
}

# ---- install -----------------------------------------------------------------
main() {
  build_parser

  msg "Installing to: $TARGET"
  mkdir -p "$TARGET_PARSER" "$TARGET_QUERIES" "$TARGET_FTDETECT" "$TARGET_PLUGIN"

  # parser: rename to <lang>.so as required by Neovim
  cp -f "${REPO_ROOT}/parser.so" "$TARGET_PARSER/${LANG_NAME}.so"

  # queries
  rsync -a --delete "${REPO_ROOT}/queries/${LANG_NAME}/" "$TARGET_QUERIES/"

  # filetype detection (so *.sr files get the 'sr' ft)
  IFS=',' read -ra exts <<<"$FILETYPES"
  ftglobs=""
  for e in "${exts[@]}"; do
    ftglobs+="au BufRead,BufNewFile *.$e setfiletype $LANG_NAME\n"
  done
  cat > "$TARGET_FTDETECT/${LANG_NAME}.vim" <<EOF
" Auto-generated by $PLUGIN_NAME installer
if exists('g:loaded_${LANG_NAME}_ftdetect') | finish | endif
let g:loaded_${LANG_NAME}_ftdetect = 1
$ftglobs
EOF

  # tiny plugin to register the language id (handy for `:TSPlayground`)
  cat > "$TARGET_PLUGIN/${LANG_NAME}.lua" <<'EOF'
-- Auto-generated by sr-treesitter installer
if vim.treesitter and vim.treesitter.language then
  -- Map filetype 'sr' -> treesitter lang 'sr' (no-op if already equal)
  pcall(vim.treesitter.language.register, 'sr', 'sr')
end
EOF

  msg "Done. Restart Neovim and open a *.${exts[0]} file."
  msg "To verify: :echo &rtp | :echo stdpath('data') | :TSModuleInfo sr"
}

main "$@"
