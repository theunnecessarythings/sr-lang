// Raylib v5.x bindings (hand-written subset; extend as needed)
// NOTE: Externs follow C ABI; for string-taking APIs, convenience wrappers accept `string`.

// ------------------------------------------------------------
// Basic Types
// ------------------------------------------------------------

Vector2 :: struct { x: f32, y: f32 }
Vector3 :: struct { x: f32, y: f32, z: f32 }
Vector4 :: struct { x: f32, y: f32, z: f32, w: f32 }
Quaternion :: Vector4

Matrix :: struct {
    m0: f32,  m4: f32,  m8: f32,  m12: f32,
    m1: f32,  m5: f32,  m9: f32,  m13: f32,
    m2: f32,  m6: f32,  m10: f32, m14: f32,
    m3: f32,  m7: f32,  m11: f32, m15: f32,
}

Color :: struct { r: u8, g: u8, b: u8, a: u8 }

Rectangle :: struct { x: f32, y: f32, width: f32, height: f32 }

Image :: struct { data: *void, width: i64, height: i64, mipmaps: i64, format: i64 }

Texture :: struct { id: u32, width: i64, height: i64, mipmaps: i64, format: i64 }
Texture2D :: Texture
TextureCubemap :: Texture

RenderTexture :: struct { id: u32, texture: Texture, depth: Texture }
RenderTexture2D :: RenderTexture

NPatchInfo :: struct { source: Rectangle, left: i64, top: i64, right: i64, bottom: i64, layout: i64 }

GlyphInfo :: struct { value: i64, offsetX: i64, offsetY: i64, advanceX: i64, image: Image }

Font :: struct { baseSize: i64, glyphCount: i64, glyphPadding: i64, texture: Texture2D, recs: *Rectangle, glyphs: *GlyphInfo }

Camera3D :: struct { position: Vector3, target: Vector3, up: Vector3, fovy: f32, projection: i64 }
Camera :: Camera3D
Camera2D :: struct { offset: Vector2, target: Vector2, rotation: f32, zoom: f32 }

Mesh :: struct {
    vertexCount: i64, triangleCount: i64,
    vertices: *f32, texcoords: *f32, texcoords2: *f32, normals: *f32, tangents: *f32,
    colors: *u8, indices: *u16,
    animVertices: *f32, animNormals: *f32, boneIds: *u8, boneWeights: *f32,
    boneMatrices: *Matrix, boneCount: i64,
    vaoId: u32, vboId: *u32,
}

Shader :: struct { id: u32, locs: *i64 }

MaterialMap :: struct { texture: Texture2D, color: Color, value: f32 }
Material :: struct { shader: Shader, maps: *MaterialMap, params: [4]f32 }

Transform :: struct { translation: Vector3, rotation: Quaternion, scale: Vector3 }
BoneInfo :: struct { name: [32]i8, parent: i64 }

Model :: struct {
    transform: Matrix,
    meshCount: i64, materialCount: i64, meshes: *Mesh, materials: *Material, meshMaterial: *i64,
    boneCount: i64, bones: *BoneInfo, bindPose: *Transform,
}

ModelAnimation :: struct { boneCount: i64, frameCount: i64, bones: *BoneInfo, framePoses: **Transform, name: [32]i8 }

Ray :: struct { position: Vector3, direction: Vector3 }
RayCollision :: struct { hit: bool, distance: f32, point: Vector3, normal: Vector3 }
BoundingBox :: struct { min: Vector3, max: Vector3 }

Wave :: struct { frameCount: u32, sampleRate: u32, sampleSize: u32, channels: u32, data: *void }
AudioStream :: struct { buffer: *void, processor: *void, sampleRate: u32, sampleSize: u32, channels: u32 }
Sound :: struct { stream: AudioStream, frameCount: u32 }
Music :: struct { stream: AudioStream, frameCount: u32, looping: bool, ctxType: i64, ctxData: *void }

VrDeviceInfo :: struct {
    hResolution: i64, vResolution: i64, hScreenSize: f32, vScreenSize: f32,
    eyeToScreenDistance: f32, lensSeparationDistance: f32, interpupillaryDistance: f32,
    lensDistortionValues: [4]f32, chromaAbCorrection: [4]f32,
}

VrStereoConfig :: struct {
    projection: [2]Matrix, viewOffset: [2]Matrix,
    leftLensCenter: [2]f32, rightLensCenter: [2]f32,
    leftScreenCenter: [2]f32, rightScreenCenter: [2]f32,
    scale: [2]f32, scaleIn: [2]f32,
}

FilePathList :: struct { capacity: u32, count: u32, paths: **i8 }

// ------------------------------------------------------------
// Selected Enums & Flags (extend as needed)
// ------------------------------------------------------------

ConfigFlags :: enum {
    FLAG_VSYNC_HINT = 64,
    FLAG_FULLSCREEN_MODE = 2,
    FLAG_WINDOW_RESIZABLE = 4,
    FLAG_WINDOW_UNDECORATED = 8,
    FLAG_WINDOW_HIDDEN = 128,
    FLAG_WINDOW_ALWAYS_RUN = 256,
}

KeyboardKey :: enum {
    KEY_NULL = 0,
    KEY_ESCAPE = 256,
    KEY_ENTER = 257,
    KEY_TAB = 258,
    KEY_BACKSPACE = 259,
    KEY_SPACE = 32,
    KEY_LEFT = 263, KEY_RIGHT = 262, KEY_UP = 265, KEY_DOWN = 264,
    KEY_A = 65, KEY_B = 66, KEY_C = 67, KEY_D = 68, KEY_E = 69, KEY_F = 70,
    KEY_G = 71, KEY_H = 72, KEY_I = 73, KEY_J = 74, KEY_K = 75, KEY_L = 76,
    KEY_M = 77, KEY_N = 78, KEY_O = 79, KEY_P = 80, KEY_Q = 81, KEY_R = 82,
    KEY_S = 83, KEY_T = 84, KEY_U = 85, KEY_V = 86, KEY_W = 87, KEY_X = 88, KEY_Y = 89, KEY_Z = 90,
}

MouseButton :: enum { MOUSE_BUTTON_LEFT = 0, MOUSE_BUTTON_RIGHT = 1, MOUSE_BUTTON_MIDDLE = 2 }

PixelFormat :: enum {
    PIXELFORMAT_UNCOMPRESSED_GRAYSCALE = 1,
    PIXELFORMAT_UNCOMPRESSED_GRAY_ALPHA = 2,
    PIXELFORMAT_UNCOMPRESSED_R5G6B5 = 3,
    PIXELFORMAT_UNCOMPRESSED_R8G8B8 = 4,
    PIXELFORMAT_UNCOMPRESSED_R5G5B5A1 = 5,
    PIXELFORMAT_UNCOMPRESSED_R4G4B4A4 = 6,
    PIXELFORMAT_UNCOMPRESSED_R8G8B8A8 = 7,
}

// ------------------------------------------------------------
// Colors (subset)
// ------------------------------------------------------------
WHITE :: Color{ r: 255, g: 255, b: 255, a: 255 }
BLACK :: Color{ r: 0, g: 0, b: 0, a: 255 }
RED   :: Color{ r: 230, g: 41, b: 55, a: 255 }
GREEN :: Color{ r: 0, g: 228, b: 48, a: 255 }
BLUE  :: Color{ r: 0, g: 121, b: 241, a: 255 }
RAYWHITE :: Color{ r: 245, g: 245, b: 245, a: 255 }

// ------------------------------------------------------------
// Core: Window, Timing, Input
// ------------------------------------------------------------

SetConfigFlags :: extern proc(u32) void
InitWindow :: extern proc(i64, i64, *void) void
CloseWindow :: extern proc() void
WindowShouldClose :: extern proc() bool
IsWindowReady :: extern proc() bool
IsWindowFullscreen :: extern proc() bool
IsWindowHidden :: extern proc() bool
IsWindowMinimized :: extern proc() bool
IsWindowMaximized :: extern proc() bool
IsWindowFocused :: extern proc() bool
IsWindowResized :: extern proc() bool
IsWindowState :: extern proc(u32) bool
SetWindowState :: extern proc(u32) void
ClearWindowState :: extern proc(u32) void
ToggleFullscreen :: extern proc() void
ToggleBorderlessWindowed :: extern proc() void
MaximizeWindow :: extern proc() void
MinimizeWindow :: extern proc() void
RestoreWindow :: extern proc() void
SetWindowIcon :: extern proc(Image) void
SetWindowIcons :: extern proc(*Image, i64) void
SetWindowTitle :: extern proc(*void) void
SetWindowPosition :: extern proc(i64, i64) void
SetWindowMonitor :: extern proc(i64) void
SetWindowMinSize :: extern proc(i64, i64) void
SetWindowMaxSize :: extern proc(i64, i64) void
SetWindowSize :: extern proc(i64, i64) void
SetWindowOpacity :: extern proc(f32) void
SetWindowFocused :: extern proc() void
GetWindowHandle :: extern proc() *void
GetScreenWidth :: extern proc() i64
GetScreenHeight :: extern proc() i64
GetRenderWidth :: extern proc() i64
GetRenderHeight :: extern proc() i64
GetMonitorCount :: extern proc() i64
GetCurrentMonitor :: extern proc() i64
GetMonitorPosition :: extern proc(i64) Vector2
GetMonitorWidth :: extern proc(i64) i64
GetMonitorHeight :: extern proc(i64) i64
SetTargetFPS :: extern proc(i64) void
GetFrameTime :: extern proc() f32

IsKeyPressed :: extern proc(i64) bool
IsKeyPressedRepeat :: extern proc(i64) bool
IsKeyDown :: extern proc(i64) bool
IsKeyReleased :: extern proc(i64) bool
IsKeyUp :: extern proc(i64) bool
GetKeyPressed :: extern proc() i64
GetCharPressed :: extern proc() i64
GetKeyName :: extern proc(i64) *i8
SetExitKey :: extern proc(i64) void

init_window :: proc(w: i64, h: i64, title: string) void {
    InitWindow(w, h, title.^*void)
}
set_window_title :: proc(title: string) void { 
    SetWindowTitle(title.^*void)
}

// ------------------------------------------------------------
// Drawing
// ------------------------------------------------------------

BeginDrawing :: extern proc() void
EndDrawing :: extern proc() void
ClearBackground :: extern proc(Color) void
DrawText :: extern proc(*void, i64, i64, i64, Color) void

draw_text :: proc(s: string, x: i64, y: i64, size: i64, c: Color) { 
    DrawText(s.^*void, x, y, size, c)
}

// ------------------------------------------------------------
// Textures & Images (selected)
// ------------------------------------------------------------

LoadTexture :: extern proc(*void) Texture2D
UnloadTexture :: extern proc(Texture2D) void
DrawTexture :: extern proc(Texture2D, i64, i64, Color) void
LoadImage :: extern proc(*void) Image
UnloadImage :: extern proc(Image) void
ImageFormat :: extern proc(*Image, i64) void
ExportImage :: extern proc(Image, *void) bool

load_texture :: proc(path: string) Texture2D { return LoadTexture(path.^*void) }
load_image :: proc(path: string) Image { return LoadImage(path.^*void) }
export_image :: proc(img: Image, path: string) bool { return ExportImage(img, path.^*void) }

// ------------------------------------------------------------
// Mouse, Touch, Gestures
// ------------------------------------------------------------
IsMouseButtonPressed :: extern proc(i64) bool
IsMouseButtonDown :: extern proc(i64) bool
IsMouseButtonReleased :: extern proc(i64) bool
IsMouseButtonUp :: extern proc(i64) bool
GetMouseX :: extern proc() i64
GetMouseY :: extern proc() i64
GetMousePosition :: extern proc() Vector2
GetMouseDelta :: extern proc() Vector2
SetMousePosition :: extern proc(i64, i64) void
SetMouseOffset :: extern proc(i64, i64) void
SetMouseScale :: extern proc(f32, f32) void
GetMouseWheelMove :: extern proc() f32
GetMouseWheelMoveV :: extern proc() Vector2
SetMouseCursor :: extern proc(i64) void

GetTouchX :: extern proc() i64
GetTouchY :: extern proc() i64
GetTouchPosition :: extern proc(i64) Vector2
GetTouchPointId :: extern proc(i64) i64
GetTouchPointCount :: extern proc() i64

SetGesturesEnabled :: extern proc(u32) void
IsGestureDetected :: extern proc(u32) bool
GetGestureDetected :: extern proc() i64
GetGestureHoldDuration :: extern proc() f32
GetGestureDragVector :: extern proc() Vector2
GetGestureDragAngle :: extern proc() f32
GetGesturePinchVector :: extern proc() Vector2
GetGesturePinchAngle :: extern proc() f32

// ------------------------------------------------------------
// Text: Fonts and drawing extended
// ------------------------------------------------------------
LoadFont :: extern proc(*void) Font
LoadFontEx :: extern proc(*void, i64, *i64, i64) Font
UnloadFont :: extern proc(Font) void
DrawTextEx :: extern proc(Font, *void, Vector2, f32, f32, Color) void
MeasureText :: extern proc(*void, i64) i64
MeasureTextEx :: extern proc(Font, *void, f32, f32) Vector2
GetGlyphIndex :: extern proc(Font, i64) i64
GetGlyphInfo :: extern proc(Font, i64) GlyphInfo
GetGlyphAtlasRec :: extern proc(Font, i64) Rectangle

load_font :: proc(path: string) Font { return LoadFont(path.^*void) }
load_font_ex :: proc(path: string, fontSize: i64, codepoints: *i64, count: i64) Font { return LoadFontEx(path.^*void, fontSize, codepoints, count) }
draw_text_ex :: proc(font: Font, text: string, pos: Vector2, size: f32, spacing: f32, tint: Color) void { DrawTextEx(font, text.^*void, pos, size, spacing, tint) }
measure_text :: proc(text: string, fontSize: i64) i64 { return MeasureText(text.^*void, fontSize) }
measure_text_ex :: proc(font: Font, text: string, size: f32, spacing: f32) Vector2 { return MeasureTextEx(font, text.^*void, size, spacing) }


// ------------------------------------------------------------
// Shapes (selected)
// ------------------------------------------------------------

DrawPixel :: extern proc(i64, i64, Color) void
DrawLine :: extern proc(i64, i64, i64, i64, Color) void
DrawRectangle :: extern proc(i64, i64, i64, i64, Color) void
DrawCircle :: extern proc(i64, i64, f32, Color) void

// ------------------------------------------------------------
// Camera2D helpers
// ------------------------------------------------------------
BeginMode2D :: extern proc(Camera2D) void
EndMode2D :: extern proc() void

// Camera3D update
UpdateCamera :: extern proc(*Camera, i64) void
UpdateCameraPro :: extern proc(*Camera, Vector3, Vector3, f32) void

// ------------------------------------------------------------
// Audio (selected)
// ------------------------------------------------------------
InitAudioDevice :: extern proc() void
CloseAudioDevice :: extern proc() void
IsAudioDeviceReady :: extern proc() bool

LoadSound :: extern proc(*void) Sound
UnloadSound :: extern proc(Sound) void
PlaySound :: extern proc(Sound) void

load_sound :: proc(path: string) Sound { return LoadSound(path.^*void) }

// ------------------------------------------------------------
// Models and 3D drawing (selected)
// ------------------------------------------------------------
LoadModel :: extern proc(*void) Model
UnloadModel :: extern proc(Model) void
DrawModel :: extern proc(Model, Vector3, f32, Color) void
DrawModelEx :: extern proc(Model, Vector3, Vector3, f32, Vector3, Color) void

load_model :: proc(path: string) Model { return LoadModel(path.^*void) }

// ------------------------------------------------------------
// Shaders (selected)
// ------------------------------------------------------------
LoadShader :: extern proc(*void, *void) Shader
UnloadShader :: extern proc(Shader) void
GetShaderLocation :: extern proc(Shader, *void) i64
SetShaderValue :: extern proc(Shader, i64, *void, i64) void
SetShaderValueMatrix :: extern proc(Shader, i64, Matrix) void
SetShaderValueTexture :: extern proc(Shader, i64, Texture2D) void

//  load_shader :: proc(vsPath: string, fsPath: string) Shader { 
//      return LoadShader(vsPath.^*void, fsPath.^*void)
//  }
//  get_shader_location :: proc(sh: Shader, name: string) i64 {
//      return GetShaderLocation(sh, name.^*void)
//  }

// ------------------------------------------------------------
// Filesystem and Paths
// ------------------------------------------------------------
FileExists :: extern proc(*void) bool
DirectoryExists :: extern proc(*void) bool
IsFileExtension :: extern proc(*void, *void) bool
GetFileExtension :: extern proc(*void) *i8
GetFileName :: extern proc(*void) *i8
GetFileNameWithoutExt :: extern proc(*void) *i8
GetDirectoryPath :: extern proc(*void) *i8
GetPrevDirectoryPath :: extern proc(*void) *i8
GetWorkingDirectory :: extern proc() *i8
GetApplicationDirectory :: extern proc() *i8
ChangeDirectory :: extern proc(*void) bool
IsPathFile :: extern proc(*void) bool

// File data
LoadFileData :: extern proc(*void, *i64) *u8
UnloadFileData :: extern proc(*u8) void
SaveFileData :: extern proc(*void, *void, i64) bool
ExportDataAsCode :: extern proc(*u8, i64, *void) bool
LoadFileText :: extern proc(*void) *i8
UnloadFileText :: extern proc(*i8) void
SaveFileText :: extern proc(*void, *i8) bool

// Dropped files
LoadDroppedFiles :: extern proc() FilePathList
UnloadDroppedFiles :: extern proc(FilePathList) void
GetFileModTime :: extern proc(*void) i64

// Memory utilities (for freeing data returned by some APIs)
MemAlloc :: extern proc(u32) *void
MemRealloc :: extern proc(*void, u32) *void
MemFree :: extern proc(*void) void

// Compression/Encoding
CompressData :: extern proc(*u8, i64, *i64) *u8
DecompressData :: extern proc(*u8, i64, *i64) *u8
EncodeDataBase64 :: extern proc(*u8, i64, *i64) *i8
DecodeDataBase64 :: extern proc(*u8, *i64) *u8
ComputeCRC32 :: extern proc(*u8, i64) u32
ComputeMD5 :: extern proc(*u8, i64) *u32 // returns pointer to static int[4]
ComputeSHA1 :: extern proc(*u8, i64) *u32 // returns pointer to static int[5]

// Convenience wrappers
file_exists :: proc(path: string) bool { return FileExists(path.^*void) }
dir_exists :: proc(path: string) bool { return DirectoryExists(path.^*void) }
is_file_extension :: proc(path: string, ext: string) bool { return IsFileExtension(path.^*void, ext.^*void) }
get_file_extension :: proc(path: string) *i8 { return GetFileExtension(path.^*void) }
get_file_name :: proc(path: string) *i8 { return GetFileName(path.^*void) }
get_file_name_wo_ext :: proc(path: string) *i8 { return GetFileNameWithoutExt(path.^*void) }
get_directory_path :: proc(path: string) *i8 { return GetDirectoryPath(path.^*void) }
get_prev_directory_path :: proc(path: string) *i8 { return GetPrevDirectoryPath(path.^*void) }
change_directory :: proc(path: string) bool { return ChangeDirectory(path.^*void) }
is_path_file :: proc(path: string) bool { return IsPathFile(path.^*void) }
load_file_text :: proc(path: string) *i8 { return LoadFileText(path.^*void) }
save_file_text :: proc(path: string, text: *i8) bool { return SaveFileText(path.^*void, text) }

// ------------------------------------------------------------
// Text codepoints and strings utilities
// ------------------------------------------------------------
LoadUTF8 :: extern proc(*i64, i64) *i8
UnloadUTF8 :: extern proc(*i8) void
LoadCodepoints :: extern proc(*void, *i64) *i64
UnloadCodepoints :: extern proc(*i64) void
GetCodepointCount :: extern proc(*void) i64
GetCodepoint :: extern proc(*void, *i64) i64
GetCodepointNext :: extern proc(*void, *i64) i64
GetCodepointPrevious :: extern proc(*void, *i64) i64
CodepointToUTF8 :: extern proc(i64, *i64) *i8

TextCopy :: extern proc(*i8, *void) i64
TextIsEqual :: extern proc(*void, *void) bool
TextLength :: extern proc(*void) u32
TextFormat :: extern proc(*void, any) *i8
TextSubtext :: extern proc(*void, i64, i64) *i8
TextReplace :: extern proc(*void, *void, *void) *i8
TextInsert :: extern proc(*void, *void, i64) *i8
TextJoin :: extern proc(**i8, i64, *void) **i8
TextSplit :: extern proc(*void, i8, *i64) **i8
TextAppend :: extern proc(*i8, *void, *i64) void
TextFindIndex :: extern proc(*void, *void) i64
TextToUpper :: extern proc(*void) *i8
TextToLower :: extern proc(*void) *i8
TextToPascal :: extern proc(*void) *i8

text_length :: proc(s: string) u32 { return TextLength(s.^*void) }
text_is_equal :: proc(a: string, b: string) bool { return TextIsEqual(a.^*void, b.^*void) }
text_subtext :: proc(s: string, pos: i64, len: i64) *i8 { return TextSubtext(s.^*void, pos, len) }


GetRandomValue :: extern proc(i64, i64) i64
KEY_NULL           :: 0,        // Key: NULL, used for no key pressed
// Alphanumeric key::
KEY_APOSTROPHE     :: 39,       // Key: '
KEY_COMMA          :: 44,       // Key: ,
KEY_MINUS          :: 45,       // Key: -
KEY_PERIOD         :: 46,       // Key: .
KEY_SLASH          :: 47,       // Key: /
KEY_ZERO           :: 48,       // Key: 0
KEY_ONE            :: 49,       // Key: 1
KEY_TWO            :: 50,       // Key: 2
KEY_THREE          :: 51,       // Key: 3
KEY_FOUR           :: 52,       // Key: 4
KEY_FIVE           :: 53,       // Key: 5
KEY_SIX            :: 54,       // Key: 6
KEY_SEVEN          :: 55,       // Key: 7
KEY_EIGHT          :: 56,       // Key: 8
KEY_NINE           :: 57,       // Key: 9
KEY_SEMICOLON      :: 59,       // Key: ;
KEY_EQUAL          :: 61,       // Key: =
KEY_A              :: 65,       // Key: A | a
KEY_B              :: 66,       // Key: B | b
KEY_C              :: 67,       // Key: C | c
KEY_D              :: 68,       // Key: D | d
KEY_E              :: 69,       // Key: E | e
KEY_F              :: 70,       // Key: F | f
KEY_G              :: 71,       // Key: G | g
KEY_H              :: 72,       // Key: H | h
KEY_I              :: 73,       // Key: I | i
KEY_J              :: 74,       // Key: J | j
KEY_K              :: 75,       // Key: K | k
KEY_L              :: 76,       // Key: L | l
KEY_M              :: 77,       // Key: M | m
KEY_N              :: 78,       // Key: N | n
KEY_O              :: 79,       // Key: O | o
KEY_P              :: 80,       // Key: P | p
KEY_Q              :: 81,       // Key: Q | q
KEY_R              :: 82,       // Key: R | r
KEY_S              :: 83,       // Key: S | s
KEY_T              :: 84,       // Key: T | t
KEY_U              :: 85,       // Key: U | u
KEY_V              :: 86,       // Key: V | v
KEY_W              :: 87,       // Key: W | w
KEY_X              :: 88,       // Key: X | x
KEY_Y              :: 89,       // Key: Y | y
KEY_Z              :: 90,       // Key: Z | z
KEY_LEFT_BRACKET   :: 91,       // Key: [
KEY_BACKSLASH      :: 92,       // Key: '\'
KEY_RIGHT_BRACKET  :: 93,       // Key: ]
KEY_GRAVE          :: 96,       // Key: `
// Function keys   ::
KEY_SPACE          :: 32,       // Key: Space
KEY_ESCAPE         :: 256,      // Key: Esc
KEY_ENTER          :: 257,      // Key: Enter
KEY_TAB            :: 258,      // Key: Tab
KEY_BACKSPACE      :: 259,      // Key: Backspace
KEY_INSERT         :: 260,      // Key: Ins
KEY_DELETE         :: 261,      // Key: Del
KEY_RIGHT          :: 262,      // Key: Cursor right
KEY_LEFT           :: 263,      // Key: Cursor left
KEY_DOWN           :: 264,      // Key: Cursor down
KEY_UP             :: 265,      // Key: Cursor up
KEY_PAGE_UP        :: 266,      // Key: Page up
KEY_PAGE_DOWN      :: 267,      // Key: Page down
KEY_HOME           :: 268,      // Key: Home
KEY_END            :: 269,      // Key: End
KEY_CAPS_LOCK      :: 280,      // Key: Caps lock
KEY_SCROLL_LOCK    :: 281,      // Key: Scroll down
KEY_NUM_LOCK       :: 282,      // Key: Num lock
KEY_PRINT_SCREEN   :: 283,      // Key: Print screen
KEY_PAUSE          :: 284,      // Key: Pause
KEY_F1             :: 290,      // Key: F1
KEY_F2             :: 291,      // Key: F2
KEY_F3             :: 292,      // Key: F3
KEY_F4             :: 293,      // Key: F4
KEY_F5             :: 294,      // Key: F5
KEY_F6             :: 295,      // Key: F6
KEY_F7             :: 296,      // Key: F7
KEY_F8             :: 297,      // Key: F8
KEY_F9             :: 298,      // Key: F9
KEY_F10            :: 299,      // Key: F10
KEY_F11            :: 300,      // Key: F11
KEY_F12            :: 301,      // Key: F12
KEY_LEFT_SHIFT     :: 340,      // Key: Shift left
KEY_LEFT_CONTROL   :: 341,      // Key: Control left
KEY_LEFT_ALT       :: 342,      // Key: Alt left
KEY_LEFT_SUPER     :: 343,      // Key: Super left
KEY_RIGHT_SHIFT    :: 344,      // Key: Shift right
KEY_RIGHT_CONTROL  :: 345,      // Key: Control right
KEY_RIGHT_ALT      :: 346,      // Key: Alt right
KEY_RIGHT_SUPER    :: 347,      // Key: Super right
KEY_KB_MENU        :: 348,      // Key: KB menu
// Keypad keys     ::
KEY_KP_0           :: 320,      // Key: Keypad 0
KEY_KP_1           :: 321,      // Key: Keypad 1
KEY_KP_2           :: 322,      // Key: Keypad 2
KEY_KP_3           :: 323,      // Key: Keypad 3
KEY_KP_4           :: 324,      // Key: Keypad 4
KEY_KP_5           :: 325,      // Key: Keypad 5
KEY_KP_6           :: 326,      // Key: Keypad 6
KEY_KP_7           :: 327,      // Key: Keypad 7
KEY_KP_8           :: 328,      // Key: Keypad 8
KEY_KP_9           :: 329,      // Key: Keypad 9
KEY_KP_DECIMAL     :: 330,      // Key: Keypad .
KEY_KP_DIVIDE      :: 331,      // Key: Keypad /
KEY_KP_MULTIPLY    :: 332,      // Key: Keypad *
KEY_KP_SUBTRACT    :: 333,      // Key: Keypad -
KEY_KP_ADD         :: 334,      // Key: Keypad +
KEY_KP_ENTER       :: 335,      // Key: Keypad Enter
KEY_KP_EQUAL       :: 336,      // Key: Keypad =
// Android key butt::s
KEY_BACK           :: 4,        // Key: Android back button
KEY_MENU           :: 5,        // Key: Android menu button
KEY_VOLUME_UP      :: 24,       // Key: Android volume up button
KEY_VOLUME_DOWN    :: 25        // Key: Android volume down button
