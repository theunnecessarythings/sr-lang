// Tuples and Arrays
main::proc() {
  // Tuple expression
  my_tuple := (1, "hello", true)

  // Accessing tuple elements
  first := my_tuple.0
  second := my_tuple.1
  
  // Array expression
  my_array := [1, 2, 3, 4, 5]

  // Array with type
  typed_array: [5]i32 = [1, 2, 3, 4, 5]

  // Accessing array elements
  val := my_array[2]

  // Array slicing 
  slice := my_array[1..3]


  // --- Hash Maps ---

  // Map literal expression. The type is inferred from the entries.
  my_map := ["one": 1, "two": 2, "three": 3]

  // An empty map requires a type annotation for the compiler to know
  // whether to create a map or an array.
  empty_map: [string:f64] = []

  // Accessing map elements using the standard index expression
  val_two := my_map["two"] // val_two is 2

  // Adding or updating an element
  my_map["two"] = 22       // Update existing key
  my_map["four"] = 4       // Add new key-value pair
}

