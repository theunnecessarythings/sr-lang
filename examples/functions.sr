// Functions and Procedures

// Function with parameters, return type, and an attribute
add := @[inline] fn(a: i32, b: i32) i32 {
    return a + b
}

// Procedure (no return value)
print_sum := proc(a: i32, b: i32) {
    sum := add(a, b)
    print(sum)
}

print_variadic :: proc(a: i32, args: any) {
    for arg in args {
        print(arg)
    }
}


// Function with no parameters
get_answer := fn() i32 {
    print_variadic(1, 3.12, .(2,3))
    return 42
}

// Extern function
extern_fn := extern fn(c: char) bool

// Async procedure (side effects are expected)
async_task := async proc() {
    // ...
}




// --- Functions with Default Arguments ---

// `active` and `level` have default values.
create_user := proc(name: string, active: bool = true, level: i32 = 1) {
    // Function call
    result := add(10, 20)
    // Procedure call
    print_sum(5, 3)
    print("Creating user:", name, ", active:", active, ", level:", level)
}

main :: proc() {
    // Calling the function with different numbers of arguments
    create_user("Alice") // Uses both default values
    create_user("Bob", false) // Overrides `active`, uses default for `level`
    create_user("Charlie", false, 5) // Provides all arguments
}
